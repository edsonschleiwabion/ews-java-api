
/**
 * Configure the classpath to find the plugins on the artifactory server.
 */
buildscript {
    repositories {
        // search artifactory repository
        maven {
            url "${artifactory_contextUrl_plugins_release}"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url "${artifactory_contextUrl_libs_release}"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'maven'
    id 'maven-publish'
    id "com.jfrog.artifactory" version "4.4.4"
    id "com.palantir.git-version" version "0.5.2"
}


group = 'com.microsoft.ews-java-api'
version = '2.1-SNAPSHOT'

description = """Exchange Web Services Java API"""

sourceCompatibility = 1.6
targetCompatibility = 1.6


repositories {
    maven {
        url "${artifactory_contextUrl_libs_release}"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
    maven {
        url "${artifactory_contextUrl_libs_snapshot}"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

def details = versionDetails()
version = details.lastTag;
logger.quiet("Git Last Tag      : ${details.lastTag}")
logger.quiet("Git Commits count : ${details.commitDistance}")
logger.quiet("Git Hashnumber    : ${details.gitHash}")
logger.quiet("Git Full Version  : ${gitVersion()}")
logger.quiet("Jar Version       : ${version}")

/**
 * Define the artifactory repository location
 */
artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
        repository {
            if (project.version.endsWith('-SNAPSHOT')) {
                repoKey = 'libs-snapshot-local'
            } else {
                repoKey = 'libs-release-local'
            }
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults { publications ('mavenJava') }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(sourcesJar) { classifier "sources" }
            artifact(javadocJar) { classifier "javadoc" }
        }
    }
}


javadoc {
    options.showAll()
    options.addStringOption("Xdoclint:none", "-quiet")
    failOnError = false
}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
}

dependencies {
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.4.1'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version:'4.4.1'
    compile group: 'commons-io', name: 'commons-io', version:'2.4'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.4'
    compile group: 'joda-time', name: 'joda-time', version:'2.8'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3'
    testCompile group: 'org.mockito', name: 'mockito-core', version:'1.10.19'
    testCompile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.12'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version:'1.1.3'
    testCompile group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.7.12'
}

task wrapper(type: Wrapper) { gradleVersion = '3.0' }

eclipse {
    classpath {
        downloadSources = true
    }

    project {
        natures = [
            'org.springsource.ide.eclipse.gradle.core.nature',
            'org.eclipse.jdt.core.javanature'
        ]
    }
}
